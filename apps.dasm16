:loop ADD A, 10
IFN A, 20
ADD B, 1
SET PC, loop

a802
d00d
8412
7dc1
0000



SET B, 10
:loop ADD A, 3
IFG A, B
ADD B, 4
SET PC, loop

a811
8c02
040e
9012
7dc1
0001





SET A, 4
SET B, 5
DIV A, B

9001
9411
0405



SET A, 20
SET B, 5
DIV A, B

d001
9411
0405






; Try some basic stuff
                      SET A, 0x30              ; 7c01 0030
                      SET [0x1000], 0x20       ; 7de1 1000 0020
                      SUB A, [0x1000]          ; 7803 1000
                      IFN A, 0x10              ; c00d
                         SET PC, crash         ; 7dc1 001a [*]

        ; Do a loopy thing
                      SET I, 10                ; a861
                      SET A, 0x2000            ; 7c01 2000
        :loop         SET [0x2000+I], [A]      ; 2161 2000
                      SUB I, 1                 ; 8463
                      IFN I, 0                 ; 806d
                         SET PC, loop          ; 7dc1 000d [*]

        ; Call a subroutine
                      SET X, 0x4               ; 9031
                      JSR testsub              ; 7c10 0018 [*]
                      SET PC, crash            ; 7dc1 001a [*]

        :testsub      SHL X, 4                 ; 9037
                      SET PC, POP              ; 61c1

        ; Hang forever. X should now be 0x40 if everything went right.
        :crash        SET PC, crash            ; 7dc1 001a [*]

7c01  0000  SET A 0x30
0030
7de1  0002  SET [0x1000] 0x20
1000
0020
7803  0005  SUB A [0x1000]
1000
c00d  0007  IFN A 0x10
7dc1  0008  SET PC crash
001a
a861  000a  SET I 10
7c01  000b  SET A 0x2000
2000
2161  000d  :loop SET [0x2000+I] [A]
2000
8463  000f  SUB I 1
806d  0010  IFN I 0
7dc1  0011  SET PC loop
000d
9031  0013  SET X 0x4
7c10  0014  JSR testsub
0018
7dc1  0016  SET PC crash
001a
9037  0018  :testsub SHL X 4
61c1  0019  SET PC POP
7dc1  001a  :crash SET PC crash
001a







JSR testsub
SET A, 5
SET PC, end
:testsub SET B, 4
SET PC, POP
:end SET C, 3

7c10
0005
9401
7dc1
0007
9011
61c1
8c21












;pseudorandom a.k.a. ASCII barf
;Author: Gleesus

;A - position to write to
SET A, 0x01f1

;B - char code to write to A
SET B, 0x22

:print
SET [0x8000+A], B

; A = ((65521 * A + 57143) % 512)
MUL A, 0xfff1
ADD A, 0xdf37
MOD A, 0x0200


; Increment B, but keep it
; within the printable ASCII chars
ADD B, 0x01
IFE B, 0x7f
   SET B, 0x21

SET PC, print



7c01  0000  SET A 0x01f1
01f1
7c11  0002  SET B 0x22
0022
0501  0004  :print SET [0x8000+A] B
8000
7c04  0006  MUL A 0xfff1
fff1
7c02  0008  ADD A 0xdf37
df37
7c06  000a  MOD A 0x0200
0200
8412  000c  ADD B 0x01
7c1c  000d  IFE B 0x7f
007f
7c11  000f  SET B 0x21
0021
7dc1  0011  SET PC print
0004

7c01
01f1
7c11
0022
0501
8000
7c04
fff1
7c02
df37
7c06
0200
8412
7c1c
007f
7c11
0021
7dc1
0004
